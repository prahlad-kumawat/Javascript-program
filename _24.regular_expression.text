Regular Expressions - 
    > A regular expression is a sequence of characters that forms a search pattern.
    > The search pattern can be used for text search and text replace operations.

What Is a Regular Expression?
    1.A regular expression is a sequence of characters that forms a search pattern.
    2.When you search for data in a text, you can use this search pattern to describe what you are searching for.
    3.A regular expression can be a single character, or a more complicated pattern.
    4.Regular expressions can be used to perform all types of text search and text replace operations.

Syntax - 
    /pattern/modifiers;
Example -
    /w3schools/i;    
    //i  is a modifier (modifies the search to be case-insensitive).


    IMP Regular Expression - 

    1.Regular Expression Modifiers
        Modifiers can be used to perform case-insensitive more global searches:

        Modifier	Description	Try it
        i	        Perform case-insensitive matching	
        g	        Perform a global match (find all matches rather than stopping after the first match)	
        m	        Perform multiline matching (it checks multiline matching in a string)
        ^           matching the first word of string

        ex - 
               let name = "is my name \nis rahul";
               console.log(name.match(\is\gm)); output - 0 - is
                                                         1 - is

    2. Regular Expression Patterns
        Brackets are used to find a range of characters:

        Expression	Description	Try it
        [abc]	    Find any of the characters between the brackets	
        [0-9]	    Find any of the digits between the brackets	
        (x|y)	    Find any of the alternatives separated with | .

        ex - console.log(name.match(\[i]\g))  output - i,i

    3. Metacharacters are characters with a special meaning:

        Metacharacter	Description	Try it
       1. \d	            Find a digit	

            ex - let num = "My name is rahul";
                console.log(num.match(/ \d / g));
 

       2. \s	            Find a whitespace in a string	
       3. \b	            Find a match at the beginning of a word 
                        like this: \bWORD, or at the end of a word like this: WORD\b	

        \uxxxx	        Find the Unicode character specified by the hexadecimal number xxxx	

        ex - let x= /\u0061/g.test(intro);
             console.log(x);

    4. Quantifiers define quantities:

        Quantifier	Description	Try it
        n+	        Matches any string that contains at least one n
        n*	        Matches any string that contains zero or more occurrences of n
        n?	        Matches any string that contains zero or one occurrences of n
    

    

               
               