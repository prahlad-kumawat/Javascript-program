     
     
     *********Incompleted*********
 
 
 Fetch API
    The Fetch API interface allows web browser to make HTTP requests to web servers.
    ðŸ˜€ No need for XMLHttpRequest anymore.

    ex -
            // fetch method is use to minimise the writing of code in *promise*.
             and we does not need to use resolve and reject method 
            // fetch returns a promise and handle the promise in fetch we can use then method.   

        fetch('https://jsonplaceholder.typicode.com/posts/')
        .then((response)=> response.json())    

            // then is returned response and when this response is json format we use json() method and its a text format use text() method. this text or json response returns as a pormise so we can also use then to print or access the result 

        .then((result)=>{console.log(result)})
        .catch((error)=>{console.log(error);})


// Now here multiple methods in fetch. below this example shows that how to use methods-

      ex - fetch('https://jsonplaceholder.typicode.com/posts', {
            method: 'POST',
            body: JSON.stringify({
                title: 'foo',
                body: 'bar',
                userId: 1,
            }),
            headers: {
                'Content-type': 'application/json; charset=UTF-8',
            },
            })
            .then((response) => response.json())
            .then((json) => console.log(json));


    Method - GET ,POST ,PUT , DELETE
       GET - 
       1. Get method is used to reading the data.
       2. This method is default method so we can directly access this method.  

       POST - 
       1.Post is used to enter new data in field        

       PUT - 
       1.Put is used to update the data         

       DELETE - 
       1.Delete is used to delete the data 

    body : Writing a code inside the body who's represent in server side.
          diff type of code : Form Data , Json Data , Text .

    header : Inside the header we specify what kind of code type inside the body.
    1.If inside the body code is json formate we use the noation -
          'Content-type': 'application/json; charset=UTF-8',  

    2.If inside the body code is other formate we use the noation -
             'Content-type': 'application/x-www-form-urlencoded';, 


when we enter the form data using fetch api - (Write code)
ex -  

     *********Incompleted*********
            










