Web APIs - 
         We always think about that api is data we fetchs in different third party website but its not true because api is 
         also available in out browser and history . so we can have a diff type of web Apis -

         1.Form api   2.History api  3.Storage api  4.Fetch api   5.Geolocation api 


    1.It can extend the functionality of the browser
    2.It can greatly simplify complex functions
    3.It can provide easy syntax to complex code

    >What is Web API?
        API stands for Application Programming Interface.
        A Web API is an application programming interface for the Web.
        A Browser API can extend the functionality of a web browser.
        A Server API can extend the functionality of a web server.

    >Browser APIs
        All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data.

        For example, the Geolocation API can return the coordinates of where the browser is located.

    >Third Party APIs - 
        Third party APIs are not built into your browser.

        To use these APIs, you will have to download the code from the Web.

        Examples:

        YouTube API - Allows you to display videos on a web site.
        Twitter API - Allows you to display Tweets on a web site.
        Facebook API - Allows you to display Facebook info on a web site. 




1.Form api - Validation API -

>Constraint Validation DOM Methods

    Property	            Description
    checkValidity()	    -  Returns true if an input element contains valid data.
    setCustomValidity() -  Sets the validationMessage property of an input element.


ex - <input type="text" id="input_field" max="50" min="40">
     <button onclick="myFunction()">Ok</button>
     <h1 id="result"></h1>

    <script>
        function myFunction(){
             let select = document.getElementById("input_field");

             if(!select.checkValidity()){
                 document.getElementById("result").innerHTML = select.validationMessage ;
             }
             else{
                 document.getElementById("result").innerHTML = select.value;

             }            
        }
    </script>


 >Validation DOM Properties
    Property	       Description
    validity	      = Contains boolean properties related to the 
                        validity of an input element.
    validationMessage = Contains the message a browser will display
                        when the validity is false.
    willValidate	  = Indicates if an input element will be validated. 

> Validity Properties
        The validity property of an input element contains a number of properties related to the validity of data:

Property	        Description
customError	    Set to true, if a custom validity message is set.
patternMismatch	Set to true, if an element's value does not match its pattern attribute.
rangeOverflow	Set to true, if an element's value is greater than its max attribute.
rangeUnderflow	Set to true, if an element's value is less than its min attribute.
stepMismatch	Set to true, if an element's value is invalid per its step attribute.
tooLong	        Set to true, if an element's value exceeds its maxLength attribute.
typeMismatch	Set to true, 
if an element's value is invalid per its type attribute.
valueMissing	Set to true, if an element (with a required attribute) has no value.
valid	        Set to true, if an element's value is valid.      
 
Examples
    If the number in an input field is greater than 100 (the input's max attribute), display a message:

    The rangeOverflow Property
        <input id="id1" type="number" max="100">
        <button onclick="myFunction()">OK</button>

        <p id="demo"></p>

    <script>
        function myFunction() {
        let text = "Value OK";
        if (document.getElementById("id1").validity.rangeOverflow) {
            text = "Value too large";
        }
        }
    </script>



2. History api - 
        The Web History API provides easy methods to access the windows.history object.
        The window.history object contains the URLs (Web Sites) visited by the user.    

     The History back() Method-
        The back() method loads the previous URL in the windows.history list.
        It is the same as clicking the "back arrow" in your browser.

            Example -
                <button onclick="myFunction()">Go Back</button>
                <script>
                    function myFunction() {
                    window.history.back();
                    }
                </script>


     The History go() Method-
            The go() method loads a specific URL from the history list:

            Example
                <button onclick="myFunction()">Go Back 2 Pages</button>
                    <script>
                        function myFunction() {
                        window.history.go(-2);
                        }
                    </script>           


    History Object Properties

    Property	-Description
    length	    -Returns the number of URLs in the history list
    History     -Object Methods

    Method  	Description
    back()	    -Loads the previous URL in the history list
    forward()	-Loads the next URL in the history list
    go()	    -Loads a specific URL from the history list  


3.Storage Api - 
    The Web Storage API is a simple syntax for storing and retrieving data in the browser. It is very easy to use:

    Example -
        localStorage.setItem("name","John Doe");
        localStorage.getItem("name");
                        

   >The localStorage Object -
        1.The localStorage object provides access to a local storage for a particular Web Site. It allows you to store, read, add, modify, and delete data items for that domain.
        2.The data is stored with no expiration date, and will not be deleted when the browser is closed.
        3.The data will be available for days, weeks, and years.  

      1.The setItem() Method
        The localStorage.setItem() method stores a data item in a storage.
        It takes a name and a value as parameters:

        Example
            localStorage.setItem("name", "John Doe");

      2.The getItem() Method
        The localStorage.getItem() method retrieves a data item from the storage.
        It takes a name as parameter:

        Example
            localStorage.getItem("name"); 

 > sessionStorage Object -
        The sessionStorage object is identical to the localStorage object.
        The difference is that the sessionStorage object stores data for one session.
        The data is deleted when the browser is closed.   


 > Storage Object Properties and Methods -
        Property            /Method	Description -
        key(n)	             -Returns the name of the nth key in the storage
        length	             -Returns the number of data items 
                             -stored in the Storage object
        getItem(keyname)	 -Returns the value of the specified key name
        setItem(keyname,value)-Adds a key to the storage, 
                                or updates a key value (if it already exists)
        removeItem(keyname)	  - Removes that key from the storage
        clear()	              -Empty all key out of the storage

         



4.Geological api - geological api is used to access the location of user.
                   its description in w3school reads in details.




