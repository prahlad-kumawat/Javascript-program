
Sorting an Array
    1.sort() - The sort() method sorts an array alphabetically:
    Example
        const fruits = ["Banana", "Orange", "Apple", "Mango"];
         fruits.sort();

    2. reverse() - reverse the array. 

    NOTE -
    1.Because of this, the sort() method will produce incorrect result when sorting numbers.  

    2.You can fix this by providing a compare function:
    Example -
        const points = [40, 100, 1, 5, 25, 10];
        points.sort(function(a, b){return a - b});
        Use the same trick to sort an array descending:

    Example - 
        const points = [40, 100, 1, 5, 25, 10];
        points.sort(function(a, b){return b - a});  

        **explain of these example - 
        The Compare Function
        The purpose of the compare function is to define an alternative sort order.

        The compare function should return a negative, zero, or positive value, depending on the arguments:

        function(a, b){return a - b}
        When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.

        If the result is negative a is sorted before b.

        If the result is positive b is sorted before a.

        If the result is 0 no changes are done with the sort order of the two values.

        Example:

        The compare function compares all the values in the array, two values at a time (a, b).

        When comparing 40 and 100, the sort() method calls the compare function(40, 100).

        The function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.

        You can use this code snippet to experiment with numerically and alphabetically sorting:

    >Sorting an Array in Random Order
        Example - 
            const points = [40, 100, 1, 5, 25, 10];
            points.sort(function(){return 0.5 - Math.random()});   


    3. Using Math.max() on an Array
        You can use Math.max.apply to find the highest number in an array:
        Example
            function myArrayMax(arr) {
            return Math.max.apply(null, arr);
            }

        Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).

    4.Math.min.apply()- this method is same as max.
    
    5.Sorting Object Arrays
            JavaScript arrays often contain objects:
            Example -
                const cars = [
                {type:"Volvo", year:2016},
                {type:"Saab", year:2001},
                {type:"BMW", year:2010}
                ];
                Even if objects have properties of different data types, the sort() method can be used to sort the array.

                The solution is to write a compare function to compare the property values:

                Example
                cars.sort(function(a, b){return a.year - b.year});

             

         note - Comparing string properties is a little more complex:

            Example - 
                cars.sort(function(a, b){
                let x = a.type.toLowerCase();
                let y = b.type.toLowerCase();
                if (x < y) {return -1;}
                if (x > y) {return 1;}
                return 0;
                });    